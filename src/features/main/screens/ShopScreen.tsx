import { useEffect, useMemo, useState } from "react";
import ScreenHeader from "@/features/main/components/ScreenHeader";
import { shopItems } from "@/features/main/data/shop";
import { useUserRuntime } from "@/features/user/UserRuntimeContext";

type ShopItem = (typeof shopItems)[number];

export default function ShopScreen() {
  const { balances, spendGram, recordBurn } = useUserRuntime();
  const items = shopItems;
  const [selected, setSelected] = useState<ShopItem | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [notice, setNotice] = useState<string | null>(null);
  const numberFormatter = useMemo(() => new Intl.NumberFormat("ru-RU"), []);
  const goldFormatter = useMemo(
    () =>
      new Intl.NumberFormat("ru-RU", {
        minimumFractionDigits: 0,
        maximumFractionDigits: 2,
      }),
    [],
  );

  const canAfford = useMemo(() => {
    if (!selected) return true;
    return balances.gram >= selected.price;
  }, [balances.gram, selected]);

  const handleBuyClick = (item: ShopItem) => {
    setSelected(item);
    setError(null);
  };

  const handleCloseModal = () => {
    setSelected(null);
    setError(null);
  };

  const handleConfirmPurchase = () => {
    if (!selected) return;
    if (balances.gram < selected.price) {
      setError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π.");
      return;
    }

    const success = spendGram(selected.price);
    if (!success) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å GRAM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return;
    }

    recordBurn(selected.price, {
      goldEarned: 0,
      source: "purchase",
      description: selected.name,
    });
    setNotice(`–°–æ–∂–∂–µ–Ω–æ ${numberFormatter.format(selected.price)} GRAM –∑–∞ ¬´${selected.name}¬ª.`);
    handleCloseModal();
  };

  useEffect(() => {
    if (!notice) return;
    const timeout = window.setTimeout(() => setNotice(null), 4000);
    return () => window.clearTimeout(timeout);
  }, [notice]);

  return (
    <section className="screen shop" aria-label="–ú–∞–≥–∞–∑–∏–Ω">
      <div className="shop-container screen-stack">
        <ScreenHeader
          title="–ú–∞–≥–∞–∑–∏–Ω"
          subtitle="–£–ª—É—á—à–∞–π—Ç–µ –º–∞–π–Ω–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é –±—É—Å—Ç–µ—Ä–æ–≤"
          className="shop-header"
        >
          <div className="shop-balance">
            <span className="shop-balance__icon">üí∞</span>
            <span className="shop-balance__label">–ë–∞–ª–∞–Ω—Å:</span>
            <span className="shop-balance__value">
              {numberFormatter.format(balances.gram)} GRAM ¬∑ {goldFormatter.format(balances.gold)}{" "}
              GOLD
            </span>
          </div>
        </ScreenHeader>

        {notice && <div className="shop-notice">{notice}</div>}

        <div className="shop-grid">
          {items.map((item) => (
            <div
              key={item.id}
              className={`shop-item ${!item.available ? "shop-item--unavailable" : ""}`}
            >
              {item.badge && <div className="shop-item__badge">{item.badge}</div>}

              <div className="shop-item__icon">{item.icon}</div>

              <div className="shop-item__content">
                <h3 className="shop-item__name">{item.name}</h3>
                <p className="shop-item__description">{item.description}</p>
                <div className="shop-item__effect">{item.effect}</div>
              </div>

              <div className="shop-item__footer">
                <div className="shop-item__price">
                  <span className="shop-item__price-value">
                    {numberFormatter.format(item.price)}
                  </span>
                  <span className="shop-item__price-currency">GRAM</span>
                </div>
                <button
                  type="button"
                  className="shop-item__button"
                  disabled={!item.available}
                  onClick={() => handleBuyClick(item)}
                >
                  {item.available
                    ? `–°–∂–µ—á—å ${numberFormatter.format(item.price)} GRAM`
                    : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
                </button>
              </div>
            </div>
          ))}
        </div>

        <div className="shop-note">
          <div className="shop-note__icon">‚ÑπÔ∏è</div>
          <p>
            –í—Å–µ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ TON blockchain. –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ
            —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.
          </p>
        </div>

        {selected && (
          <div
            className="modal"
            role="dialog"
            aria-modal="true"
            aria-labelledby="shop-purchase-title"
          >
            <div className="modal__backdrop" onClick={handleCloseModal} aria-hidden />
            <div className="modal__content">
              <h2 id="shop-purchase-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</h2>
              <p className="modal__item">{selected.name}</p>
              <p className="modal__details">
                –ù—É–∂–Ω–æ —Å–∂–µ—á—å {numberFormatter.format(selected.price)} GRAM
                {selected.effect ? ` –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞: ${selected.effect}` : ""}.
              </p>
              <p className="modal__hint">
                –ë–∞–ª–∞–Ω—Å: {numberFormatter.format(balances.gram)} GRAM ¬∑{" "}
                {goldFormatter.format(balances.gold)} GOLD
              </p>
              {!canAfford && !error && (
                <p className="modal__warning">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</p>
              )}
              {error && <p className="modal__error">{error}</p>}
              <div className="modal__actions">
                <button type="button" className="modal__button" onClick={handleCloseModal}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  type="button"
                  className="modal__button modal__button--primary"
                  onClick={handleConfirmPurchase}
                  disabled={!canAfford}
                >
                  –°–∂–µ—á—å {numberFormatter.format(selected.price)} GRAM
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
}
